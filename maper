#!/usr/bin/env bash

ppath=$(realpath "$BASH_SOURCE")
pdir=$(dirname "$ppath")
pname=$(basename "$ppath")

set -e

. "$pdir"/generic-functions

startsec=$(date +%s)

usage() {
    cat <<EOF

    MAPER - Calculate robust registration between a source-target pair, transform label images to target,
            fuse result from multiple transformations to same target if available.

    Usage: $pname -srcid SourceID -tgtid TargetID <src_spec> <tgt_spec> -output-dir /path/to/write/output

    <source_spec> consists of either

       [-srcop src-onepad.nii.gz]

       or

       [-srcmri src-mri.nii.gz]

          plus

          [-srcmask src-brainmask.nii.gz]
             If -srcmri is specified without -srcmask, a skullstripped image is assumed.
             If -srcop is specified, its own masking takes precedence.

    [-srctc3raw src-three-tissue-class-probmap.nii.gz]
       If not provided, this will be calculated.

    [-spn pretransformation.dof.gz]
       This will be combined with the inverse of -tpn to achieve prealignment.

    [-srclabels name1:labelset1.nii.gz]

    [-srclabels name2:labelset2.nii.gz]
       Up to four allowed -- will be transformed according to registration result.

    [-srccache cache-dir/]
       Location for storing intermediate files for later re-use

    <target_spec>

        [-tgtop tgt-onepad.nii.gz]

        [-tgtmri tgt-mri.nii.gz]

        [-tgtmask tgt-brainmask.nii.gz]

        [-tgttc3raw tgt-three-tissue-class-probmap.nii.gz]

        treated analogously to corresponding <source_spec> items.

    [-tpn pretransformation.dof.gz]
       Obligatory if -spn specified. Either is ignored unless both are specified.

    [-tgtlabels name1:labelset1.nii.gz]

    [-tgtlabels name2:labelset2.nii.gz]
       These will be used as reference for overlap assessment of transformed labels

    [-tgtcache cache-dir/]
       Location for storing intermediate files for later re-use. Should normally be
       different from -srccache

    [-atlasn NN]
          If NN source transformations are found for TargetID in -output-dir,
          label fusion will be performed.

    [-tc3out]
       Raw three-class tissue probability map for target image will be saved
       (compressed file size is ca. 5 Ã— input image)

    [-tc3crisp]
       Discrete three-class tissue map for target image will be saved

    [-tc3only]
       Exit after tc3 generation

    [-notc]
       Skip tissue mapping and tissue-class based prealignment

    [-notc3]
       (Deprecated) Skip tissue mapping and tissue-class based prealignment

    [-tc3]
       Perform three-class (CSF, GM, WM) tissue mapping and prealign on this basis

    [-tc2]
       Perform three-class (CSF, GM, WM) tissue mapping and prealign on the basis
       of two tissue classes (CSF and merged GMWM)

    [-quicktest]
       For accelerated run (very coarse result)

    [-dry-run]
       Test if options correctly specified. Perform label fusion if -atlasn also
       specified.

    [-verbose]
       To show registration output on stdout

    [-debug]
       To save temporary working directory to -output-dir location

EOF
}

### Check for MIRTK and NiftySeg

type mirtk >/dev/null 2>&1 || fatal "MIRTK not found. Please ensure mirtk binary is on executable path."
type seg_maths >/dev/null 2>&1 || fatal "NiftySeg not found. Please ensure seg_maths is on executable path."

### Parameters

quicktest=
srcop=null
srcmri=null
isrcsegs=
srcmask=null
nsrcsegs=0
srctc3raw=null
spn=neutral.dof.gz
srccache=
tgtop=null
tgtmri=null
tgtmask=null
itgtsegs=
ntgtsegs=0
tgttc3raw=null
tpn=neutral.dof.gz
tgtcache=
outdir=$PWD/maper-$$
atlasn=
tc2=0
tc3=0
tc3out=
tc3crisp=
tc3only=0
notc=
notc3=
debug=
threads=1
[[ $# -lt 10 ]] && fatal "Parameter error"
while [ $# -gt 0 ]
do
    case "$1" in
	-srcid)          srcid="$2" ; shift ;;
	-srcop)          srcop=$(realpath "$2") ; shift ;;
	-srcmri)        srcmri=$(realpath "$2") ; shift ;;
	-srctc3raw)  srctc3raw=$(realpath "$2") ; shift ;;
	-srcmask)      srcmask=$(realpath "$2") ; shift ;;
	-srclabels)   isrcsegs="$isrcsegs "$2 ; (( nsrcsegs += 1 )) ; shift ;;
	-spn)              spn=$(realpath "$2") ; shift ;;
	-srccache)    srccache=$(realpath "$2") ; shift ;;
	-tgtid)          tgtid="$2" ; shift ;;
	-tgtop)          tgtop=$(realpath "$2") ; shift ;;
	-tgtmri)        tgtmri=$(realpath "$2") ; shift ;;
	-tgttc3raw)  tgttc3raw=$(realpath "$2") ; shift ;;
	-tgtmask)      tgtmask=$(realpath "$2") ; shift ;;
	-tgtlabels)   itgtsegs="$itgtsegs "$2 ; (( ntgtsegs += 1 )) ; shift ;;
	-tpn)              tpn=$(realpath "$2") ; shift ;;
	-tgtcache)    tgtcache=$(realpath "$2") ; shift ;;
	-output-dir)    outdir=$(realpath "$2") ; shift ;;
	-atlasn)        atlasn="$2" ; shift ;;
	-threads)      threads="$2" ; shift ;;
  -tc2)              tc2=1 ;;
  -tc3)              tc3=1 ;;
	-tc3out)        tc3out=1 ;;
	-tc3crisp)    tc3crisp=1 ;;
	-tc3only)      tc3only=1 ;;
	-notc)            notc=1 ;;
	-notc3)          notc3=1 ;;
	-dry-run)       dryrun=1 ;;
	-quicktest)  quicktest=1 ;;
	-verbose)      verbose=1 ;;
	-debug)          debug=1 ;;
	-*)
	    fatal "Parameter error" ;;
*)  break ;; # terminate while loop
    esac
    shift
done

export OMP_NUM_THREADS=$threads

[[ $notc3 == 1 ]] && notc=1

[[ $notc == 1 && $[ $tc3out + $tc3crisp + $tc3only ] > 0 ]] && fatal "Parameter error: -notc (-notc3) is incompatible with -tc3 options"

[[ $[ $tc2 + $tc3 ] > 1 ]] && fatal "Parameter error: only one of -tc2 and -tc3 is permitted"

[[ $tc3 == 0 ]] && tc2=1

declare -A sourceseg
for i in $isrcsegs ; do
    set -- $(echo $i | tr ':' ' ' )
    segname=$1 ; shift
    ii=$(realpath $1)
    [[ -e $ii ]] || msg "Source seg $i does not exist"
    sourceseg["$segname"]=$ii
done
[[ ${#sourceseg[@]} -lt 1 ]] && msg "No source segmentation defined"

declare -A targetseg
for i in $itgtsegs ; do
    set -- $(echo $i | tr ':' ' ' )
    segname=$1 ; shift
    ii=$(realpath $1)
    [[ -e $ii ]] || msg "Target seg $i does not exist"
    targetseg["$segname"]=$ii
done

baseoutdir=$outdir
outdir="$outdir/$tgtid/$srcid-$tgtid"

### Functions

progress() {
    local inp=$*
    if [[ -z $verbose ]] ; then
        echo -n .
    else
        msg "$inp"
    fi
}

tc3() { ### Tissue classification
    local input=$(realpath "$1") ; shift
    # Expected: mri.nii.gz mask.nii.gz pre.dof.gz
    # Optional: tc3raw.nii.gz
    local outdir=$(realpath "$1") ; shift

    local bn=$(basename "$input")
    local tdl=$(mktemp -d tc3."$bn".XXXXX)
    cd $tdl

    if [[ -n $dryrun ]] ; then
	      ( cd $outdir
	        for i in csf gm wm gmwm wmr wml gmwmr gmwml crisp-csf crisp-gm crisp-wm crisp tc3 ; do
		          touch $i.nii.gz
	        done
	      )
	      cd ..
	      return
    fi

    seg_maths "$input"/mask.nii.gz mask.nii.gz

    if [[ -s "$input"/tc3raw.nii.gz ]] ; then
	      cp "$input"/tc3raw.nii.gz tc3raw.nii.gz
    else
	      seg_maths "$input"/mri.nii.gz brain
	      seg_EM -in brain -out tc3raw.nii.gz -bc_out bcout -nopriors 3 -mask mask.nii.gz
	      cp tc3raw.nii.gz "$outdir"
    fi

    # Prepare left and right masks
    mirtk transform-image $pdir/rightmask.nii.gz rightmask-custom.nii.gz -invdof "$input"/pre.dof.gz -target mask.nii.gz
    seg_maths rightmask-custom.nii.gz -sub 1 -abs leftmask-custom.nii.gz

    # Generate crisp labels
    seg_maths tc3raw -tpmax -add mask crisp
    seg_maths crisp -thr 0.5 -uthr 1.5 "$outdir"/crisp-csf.nii.gz
    seg_maths crisp -thr 1.5 -uthr 2.5 "$outdir"/crisp-gm.nii.gz
    seg_maths crisp -thr 2.5 -uthr 3.5 "$outdir"/crisp-wm.nii.gz
    seg_maths crisp "$outdir"/crisp.nii.gz

    # Get individual tc probability maps, subsample
    seg_maths tc3raw -tp 0 -mul 254 csf-pre
    seg_maths mask -dil 6 -add csf-pre csf.nii.gz
    seg_maths tc3raw.nii.gz -tp 1 -mul 255 gm.nii.gz
    seg_maths tc3raw.nii.gz -tp 2 -mul 255 wm.nii.gz
    seg_maths gm.nii.gz -sub wm.nii.gz -abs -add gm.nii.gz -add wm.nii.gz -div 2 gmwm.nii.gz
    seg_maths wm.nii.gz -mul rightmask-custom.nii.gz wmr.nii.gz
    seg_maths wm.nii.gz -mul leftmask-custom.nii.gz wml.nii.gz
    seg_maths gmwm.nii.gz -mul rightmask-custom.nii.gz gmwmr.nii.gz
    seg_maths gmwm.nii.gz -mul leftmask-custom.nii.gz gmwml.nii.gz
    seg_maths csf.nii.gz -merge 2 4 gm.nii.gz wm.nii.gz -div 255 "$outdir"/tc3.nii.gz
    seg_maths csf.nii.gz -merge 1 4 gmwm.nii.gz -div 255 "$outdir"/tc2.nii.gz
    cp csf.nii.gz "$outdir"/csf.nii.gz
    cp gm.nii.gz "$outdir"/gm.nii.gz
    cp wm.nii.gz "$outdir"/wm.nii.gz
    cp gmwm.nii.gz "$outdir"/gmwm.nii.gz
    cp wmr.nii.gz "$outdir"/wmr.nii.gz
    cp wml.nii.gz "$outdir"/wml.nii.gz
    cp gmwmr.nii.gz "$outdir"/gmwmr.nii.gz
    cp gmwml.nii.gz "$outdir"/gmwml.nii.gz
    cd ..
}

regprop() {  ### Registration and label propagation
    local src="$1" ; shift
    local tgt="$1" ; shift
    local outdir=$1 ; shift

    local dof="$outdir"/src-tgt.dof.gz
    local srcseg="$src"/srcseg.nii.gz
    local autosegdir="$outdir"/seg/

    local tdl=$(mktemp -d regprop.XXXXX)
    cd "$tdl"

    cp "$pdir"/neutral.dof.gz .

    ds=2.5 ; [[ $quicktest ]] && ds=10

    if [[ -z $dryrun ]] ; then
	      if [[ ! -e "$dof" ]] ; then

	          mirtk compose-dofs "$src"/pre.dof.gz "$tgt"/pre.dof.gz prealign.dof.gz -scale 1 -1
	          mirtk convert-dof prealign.dof.gz prealign.txt -input-format rigid -output-format aladin

	          if [[ $notc == 1 ]] ; then lastrigidlevel=1 ; else lastrigidlevel=4 ; fi

	          mirtk register \
		              "$tgt"/mri.nii.gz "$src"/mri.nii.gz -dofout coarse0-0.dof.gz \
		              -model Rigid -levels 4 $lastrigidlevel -threads $threads 

	          mirtk register \
		              "$tgt"/mri.nii.gz "$src"/mri.nii.gz -dofin prealign.dof.gz -dofout coarse0-1.dof.gz \
		              -model Rigid -levels 4 $lastrigidlevel -threads $threads

	          topnmi=$(
		            for i in neutral prealign coarse0-0 coarse0-1 ; do
		                nmi=$(mirtk evaluate-similarity "$tgt"/mri.nii.gz "$src"/mri.nii.gz \
					                                    -metric NMI -noid -csv -precision 7 \
					                                    -dofin $i.dof.gz | tail -n 1)
		                echo $nmi, $i
		            done | sort -rn | head -n 1 | cut -d , -f 2
		              )
            msg "$topnmi is optimal"
	          cp $topnmi.dof.gz coarse0.dof.gz

	          if [[ -z $notc ]] ; then
                if [[ $tc3 == 1 ]] ; then
		                mirtk register \
                          "$tgt"/wmr.nii.gz "$tgt"/wml.nii.gz \
                          "$src"/wmr.nii.gz "$src"/wml.nii.gz \
                          -dofin coarse0.dof.gz -dofout coarse1.dof.gz -bg -1 -model Affine+FFD -levels 4 4 \
                          -par "Energy function" "0.5 SSD(I1, I3 o T) + 0.5 SSD(I2, I4 o T) + 1e-3 BE(T)" \
		                      -ds $ds -threads $threads
		                mirtk register \
                          "$tgt"/csf.nii.gz "$tgt"/gm.nii.gz \
                          "$src"/csf.nii.gz "$src"/gm.nii.gz \
                          -dofin coarse1.dof.gz -dofout coarse.dof.gz -bg -1 -model Affine+FFD -levels 3 2 \
                          -par "Energy function" "0.6 SSD(I1, I3 o T) + 0.4 SSD(I2, I4 o T) + 1e-3 BE(T)" \
		                      -ds $ds -threads $threads
                fi
                if [[ $tc2 == 1 ]] ; then
                    mirtk register \
                          "$tgt"/gmwmr.nii.gz "$tgt"/gmwml.nii.gz \
                          "$src"/gmwmr.nii.gz "$src"/gmwml.nii.gz \
                          -dofin coarse0.dof.gz -dofout coarse1.dof.gz -bg -1 -model Affine+FFD -levels 4 4 \
                          -par "Energy function" "0.5 SSD(I1, I3 o T) + 0.5 SSD(I2, I4 o T) + 1e-3 BE(T)" \
		                      -ds $ds -threads $threads
		                mirtk register \
                          "$tgt"/csf.nii.gz "$src"/csf.nii.gz \
                          -dofin coarse1.dof.gz -dofout coarse.dof.gz -bg -1 -model Affine+FFD -levels 3 2 \
                          -par "Energy function" "SSD(I1, I2 o T) + 1e-3 BE(T)" \
		                      -ds $ds -threads $threads
                fi
		            nextlevel=2
	          else
		            mirtk register "$tgt"/onepad.nii.gz "$src"/onepad.nii.gz \
                      -dofin coarse0.dof.gz -dofout coarse.dof.gz -bg -1 -model Affine -levels 4 1 \
		                  -threads $threads
		            nextlevel=4
	          fi

	          mirtk register "$tgt"/onepad.nii.gz "$src"/onepad.nii.gz \
	    	          -dofin coarse.dof.gz -dofout fine.dof.gz \
	    	          -bg 0 -model FFD -levels $nextlevel 1 -ds $ds -threads $threads \
	    	          -par "Strict step length range" "No" \
	    	          -par "Maximum streak of rejected steps" 2 
	          cp fine.dof.gz "$dof"

	          if [[ $debug ]] ; then
		            mirtk transform-image "$src"/crisp.nii.gz prealign.nii -dofin prealign.dof.gz -target "$tgt"/crisp.nii.gz
		            echo -e $(mirtk evaluate-label-overlap "$tgt"/crisp.nii.gz prealign.nii -precision 3 -table | tail -n +2 | cut -d , -f 2,3,12)"\t "
		            for i in coarse0 coarse1 fine ; do
		                mirtk transform-image "$src"/crisp.nii.gz $i.nii -dofin $i.dof.gz -target "$tgt"/crisp.nii.gz
		                echo -e $(mirtk evaluate-label-overlap "$tgt"/crisp.nii.gz $i.nii -precision 3 -table | tail -n +2 | cut -d , -f 2,3,12)"\t "
		            done
		            echo
	          fi
	      fi
    fi

    # c=0
    for i in ${!sourceseg[@]} ; do
	      srcseg=${sourceseg["$i"]}
	      if [[ -s $srcseg ]] ; then
	          autoseg="$autosegdir"/$i.nii.gz
	          autosegtc="$autosegdir"/$i-tcsep.nii.gz 
	          [[ -e "$autoseg" ]] && continue
	          if [[ -n $dryrun ]] ; then touch "$dof" "$autoseg" ; continue ; fi
	          mirtk transform-image $srcseg "$autoseg" \
		              -dofin "$dof" -target "$tgt"/onepad.nii.gz -interp "NN" -threads $threads
	      fi
    done

    cd ..
}

onepadgen() {

    ### The user has the option to specify op, mask, and mri
    ### Default for each is null
    ### In the end, we need op, mask, and mri set (non-null files in output dir)

    ### 1 op set, mask set, mri set => do nothing
    ### 2 op set, mask set, mri null => do nothing
    ### 3 op set, mask null, mri set => generate mri and mask
    ### 4 op set, mask null, mri null => generate mri and mask
    ### 5 op null, mask set, mri set => generate onepad
    ### 6 op null, mask set, mri null => error
    ### 7 op null, mask null, mri set => generate mask (assume mri is masked)
    ### 8 op null, mask null, mri null => error

    local mri=$(realpath "$1") ; shift
    local mask=$(realpath "$1") ; shift
    local onepad=$(realpath "$1") ; shift

    local tdl=$(mktemp -d onepadgen.XXXX)
    cd $tdl

    if [[ -s "$onepad" ]] ; then # 1 2 3 4
        if [[ -s "$mask" ]] ; then # 1 2
            :
        else # 3 4
	          mirtk calculate-element-wise "$onepad" -map 1 0 -o "$mri" -threads $threads ## generate mri as masked
            seg_maths "$mri" -bin -fill "$mask" ## Generate mask
        fi
    else # 5 6 7 8
        if [[ -s "$mask" ]] ; then # 5 6
            if [[ -s "$mri" ]] ; then # 5
	              cp "$mask" mask.nii.gz
	              mirtk dilate-image mask.nii.gz mask-dil.nii -iterations 6
                mirtk calculate-element-wise "$mri" -mask mask.nii.gz -pad 0 -o masked.nii -threads 1
                mirtk calculate-element-wise mask-dil.nii -sub mask.nii.gz -add masked.nii -o "$onepad" float -threads 1
            else # 6
                return 1
            fi
        else # 7 8
            if [[ -s "$mri" ]] ; then # 7
                seg_maths "$mri" -bin -fill "$mask" ## Generate mask
                mirtk dilate-image "$mask" mask-dil.nii -iterations 6
                mirtk calculate-element-wise mask-dil.nii -sub "$mask" -add "$mri" -o "$onepad" float -threads 1
            else # 8
                return 1
            fi
        fi
    fi

    cd ..
}

d2j() { d=$(echo $1 | sed -e 's/.*e.*/0/') ; echo scale=6 \; $d'/(2-'$d')' | bc -l ; }

###
msg "=== Preparation: staging files and generating onepad images ==="

mkdir -p "$outdir" || fatal "Could not create output directory $outdir"

if [[ -n $srccache ]] ; then
    srccache_=$srccache/$srcid
    if mkdir -p $srccache_ ; then
	msg "Source cache $srccache/$srcid okay"
    else
	msg "Could not create source cache $srccache/$srcid -- not caching source intermediates"
	unset srccache_
    fi
fi

if [[ -n $tgtcache ]] ; then
    tgtcache_=$tgtcache/$tgtid
    if mkdir -p $tgtcache_ ; then
	msg "Target cache $tgtcache/$tgtid okay"
    else
	msg "Could not create target cache $tgtcache/$tgtid -- not caching target intermediates"
	unset tgtcache_
    fi
fi

td=$(tempdir)
trap finish EXIT
cd "$td"
touch null
cp "$pdir"/neutral.dof.gz .
mkdir -p tgt src regout/seg
outdof="$outdir"/src-tgt.dof.gz
[[ -e $outdof ]] && cp $outdof regout/
set -- "$outdir"/seg/*
[[ -e $1 ]] && cp $@ regout/seg/

cp "$srcop" src/onepad.nii.gz
cp "$srcmri" src/mri.nii.gz
cp "$srcmask" src/mask.nii.gz
[[ -z $notc ]] && cp "$srctc3raw" src/tc3raw.nii.gz
cp "$spn" src/pre.dof.gz
onepadgen src/mri.nii.gz src/mask.nii.gz src/onepad.nii.gz \
    || fatal "Source specification incomplete. Either [-srcop file] or [-srcmri fileA -srcmask fileB] must be provided on commandline."

cp "$tgtop" tgt/onepad.nii.gz
cp "$tgtmri" tgt/mri.nii.gz
cp "$tgtmask" tgt/mask.nii.gz
[[ -z $notc ]] && cp "$tgttc3raw" tgt/tc3raw.nii.gz
cp "$tpn" tgt/pre.dof.gz
onepadgen tgt/mri.nii.gz tgt/mask.nii.gz tgt/onepad.nii.gz \
    || fatal "Target specification incomplete. Either [-tgtop file] or [-tgtmri fileA -tgtmask fileB] must be provided on commandline."

### Main routine

if [[ -z $notc ]] ; then
    set --
    [[ -n $srccache_ ]] && set -- $srccache_/*
    if [[ $# -gt 8 ]] ; then
	cp "$@" src
    else
	msg "=== Generating tissue-class probability maps for source ==="
	tc3 src src
	fillsrccache=1
    fi

    set --
    [[ -n $tgtcache_ ]] && set -- $tgtcache_/*
    if [[ $# -gt 8 ]] ; then
	cp "$@" tgt
    else
	msg "=== Generating tissue-class probability maps for target ==="
	tc3 tgt tgt
	filltgtcache=1
    fi
fi

if [[ $tc3only == 0 ]] ; then
    msg "=== Registration and propagation ==="
    regprop "$td"/src "$td"/tgt "$td"/regout | while read i ; do progress "$i" ; done
    msg "."
fi

### Stage out results

cp -r regout/* "$outdir"/
[[ $debug ]] && cp -a $td "$outdir"
[[ $tc3out ]] && cp tgt/tc3raw.nii.gz "$outdir"/tgt-tc3raw.nii.gz
[[ $tc3crisp ]] && cp tgt/crisp.nii.gz "$outdir"/tgt-tc3crisp.nii.gz
[[ $tc3only -ne 0 ]] && exit 0
[[ ! $dryrun ]] && [[ $fillsrccache == 1 ]] && [[ -n $srccache_ ]] && cp src/* $srccache_/
[[ ! $dryrun ]] && [[ $filltgtcache == 1 ]] && [[ -n $tgtcache_ ]] && cp tgt/* $tgtcache_/

### Fusion if numbers suffice

fuse() {
    fused="$1" ; shift
    nfuse="$1" ; shift
    first="$1" ; shift
    seg_maths "$first" -merge $[nfuse-1] 4 $* merged.nii
    seg_LabFusion -in merged.nii -MV -out $fused
    rm merged.nii
}

if [[ $atlasn -ge 3 ]] ; then
    for i in ${!sourceseg[@]} ; do
	set -- "$baseoutdir"/$tgtid/*-$tgtid/seg/"$i".nii.gz
	if mkdir "$baseoutdir"/fusion-semaphore-$i-$tgtid 2>/dev/null ; then
	    nready=$#
	    if [[ $nready -ge $atlasn ]] ; then

		# Fuse output
		thisseg="$baseoutdir"/f$nready-"$i"-$tgtid

		if [[ ! -s $thisseg.nii.gz ]] ; then
		    fuse "$thisseg".nii.gz $# $*

		    # Generate tissue-class separated output
		    if [[ -z $notc ]] ; then
			read min max <<< $( seg_stats "$thisseg.nii.gz" -r )
			sep=$[max + 1]
			seg_maths tgt/crisp.nii.gz -mul $sep -add "$thisseg".nii.gz "$thisseg"-tcsep-at$sep.nii.gz
      cp tgt/crisp.nii.gz "$thisseg-tc3crisp.nii.gz"

			# Compare fused with reference
			ref=${targetseg["$i"]}
			if [[ -s $ref ]] ; then
			    seg_stats $ref -d "$thisseg".nii.gz | grep = | tr -d 'a-zL\[\]=' >ls.csv
			    ( echo region,jc ; cat ls.csv | grep -v M | while read region dsc ; do
				    echo $region, $(d2j $dsc) ; done ) >"$thisseg"-indivjc.csv
			    echo $(d2j $(grep M ls.csv | rev | cut -d ' ' -f 1 | rev )) >"$thisseg"-meanjc.csv
			fi
		    fi
		fi
	    fi
	    rm -r "$baseoutdir"/fusion-semaphore-$i-$tgtid
	fi
    done
fi

endsec=$(date +%s)
msg "runtime: $[$endsec-$startsec] seconds"
